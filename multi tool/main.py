import sys
import json
import os
import requests
import webbrowser
import time
import asyncio
import pyperclip
import timeago
import datetime
import chromedriver_autoinstaller
import threading
import random
import string
import pathlib
import re
from colorama import Fore
from selenium import webdriver
from concurrent.futures import ThreadPoolExecutor, as_completed
from PyQt5.QtGui import *
from PyQt5.QtWidgets import QApplication, QWidget, QMainWindow, QPushButton, QLineEdit, QLabel, QToolButton, QListWidget, QListWidgetItem, QStackedWidget, QGridLayout, QVBoxLayout, QHBoxLayout, QComboBox, QDesktopWidget, QPlainTextEdit, QFileDialog
from PyQt5.QtCore import Qt, QSize, QByteArray, QEventLoop
from qtwidgets import AnimatedToggle, Toggle
chromedriver_autoinstaller.install()

clear = lambda: os.system('cls')
os.system('title Eclipze Logs')

lock = threading.Lock()
discord_invite = 'https://discord.com/invite/y8KMEN7Y5Q'
website_link = 'https://eclipze.xyz'

# Images
eclipze_icon = b'iVBORw0KGgoAAAANSUhEUgAAACwAAAAyCAYAAAAnWDnqAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABj0lEQVRogd1Z7Q7DIAiUZe//yu7XlsYKHHBVs0uW7gPhSoEhSrujX97L5PetGAl1QGYrXoDM7Ca2AfGwJouuQ3WkFaCkq55PkdcWrQyDEHHGY2YBIu4JHUcauSuENPpYy8lZMVTNeI/8VD9Sh2eLGX8mj1SJiNKUx5y1tzVIHX6ikkTqv6gf0EWOLIoUaTSGR0WMcpdK5Cthj0Qfrgygun5yqIejBio6TS9/Ce9uIWH7lod3Nu5qQnohkSEtwwsF5GUkhlGjGsEocRMa4RP2caVeIqU8IeOhvxpef1fAtcXy8DL8JeGVCQj1EidUBBSieTiaaIg8RSczhrtiRPte02HiDSoSplFgPbRr9hrq3R2dtBYLiSOS0yMcaq6TCOm8Eo50ZSzIcHVtZgfaTwxS0sPAyFbfko/YtPSZcwmPRGWoktl9QJMfhAArjsMnVtUxVIV4KjdYA23mfNjUxR5Es1AeaLd2COlMDG49YWInTQRoYwXV4SgYyQmRPqIDu8AlfdqumXJOtwMr2lo6puHxAXemT1Hi/bLFAAAAAElFTkSuQmCC'
eclipze_image = b''
website_icon = b''
discord_icon = b''
edit_button = b'iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFFmlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxNDggNzkuMTY0MDM2LCAyMDE5LzA4LzEzLTAxOjA2OjU3ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjEuMCAoV2luZG93cykiIHhtcDpDcmVhdGVEYXRlPSIyMDIxLTA1LTI5VDAyOjMwOjQ3LTA3OjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyMS0wNS0yOVQwMjozMzoyMC0wNzowMCIgeG1wOk1ldGFkYXRhRGF0ZT0iMjAyMS0wNS0yOVQwMjozMzoyMC0wNzowMCIgZGM6Zm9ybWF0PSJpbWFnZS9wbmciIHBob3Rvc2hvcDpDb2xvck1vZGU9IjMiIHBob3Rvc2hvcDpJQ0NQcm9maWxlPSJzUkdCIElFQzYxOTY2LTIuMSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDoyYTA3NjBmMC1hNGE2LTMzNDUtYTEzNi1lYTZhMWI4ZTdmMDkiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6MmEwNzYwZjAtYTRhNi0zMzQ1LWExMzYtZWE2YTFiOGU3ZjA5IiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6MmEwNzYwZjAtYTRhNi0zMzQ1LWExMzYtZWE2YTFiOGU3ZjA5Ij4gPHhtcE1NOkhpc3Rvcnk+IDxyZGY6U2VxPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY3JlYXRlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDoyYTA3NjBmMC1hNGE2LTMzNDUtYTEzNi1lYTZhMWI4ZTdmMDkiIHN0RXZ0OndoZW49IjIwMjEtMDUtMjlUMDI6MzA6NDctMDc6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyMS4wIChXaW5kb3dzKSIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz6KvVlFAAABKklEQVRoge2Z0Q7CIAxFz4z//8vz1UxLWwptl+w+GWHJOUGuiMd5ntw5r2qAaB6B6txe4F0NAGgtcowGq1fAUoHDOZUCnv4W51YJzHz5/H2mYg9I8NfPukkyewWs8NJ7P8kU2HJmyRLQ4KflMgSscFMSuwW8UKfwWszOFtI2rDTukt61Apa2MbWMNn+HwPKqHM1bLeCBt4yp4ysFZuC1qM+uEojAh8RXCJTBQ1ygFB5iAuXwMC/QAh7mBNrAg1+gFTz4BNrBg12gJTzYBNrCgy7QGh7mWqgNPPgFWsFDj+N0KCOByO/Z72yDB98KjEBK4KH+OB2OdCsRvYhKgQfftYp1T6TBw/oWSoWHtQLp8BC7mSsBvsYr0AL6O5JAO1Ap1f9ShvMIVOf2Ah9eLDxq6puuoAAAAABJRU5ErkJggg=='
login_button = b'iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFFmlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxNDggNzkuMTY0MDM2LCAyMDE5LzA4LzEzLTAxOjA2OjU3ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjEuMCAoV2luZG93cykiIHhtcDpDcmVhdGVEYXRlPSIyMDIxLTA0LTA4VDE3OjQ2OjA0LTA3OjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyMS0wNC0wOFQxNzo1MzozOS0wNzowMCIgeG1wOk1ldGFkYXRhRGF0ZT0iMjAyMS0wNC0wOFQxNzo1MzozOS0wNzowMCIgZGM6Zm9ybWF0PSJpbWFnZS9wbmciIHBob3Rvc2hvcDpDb2xvck1vZGU9IjMiIHBob3Rvc2hvcDpJQ0NQcm9maWxlPSJzUkdCIElFQzYxOTY2LTIuMSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpjNmJjZjAwMS0yNzhjLTMyNGItODViZi03ZGU3ZjQ4YmE2YTEiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6YzZiY2YwMDEtMjc4Yy0zMjRiLTg1YmYtN2RlN2Y0OGJhNmExIiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6YzZiY2YwMDEtMjc4Yy0zMjRiLTg1YmYtN2RlN2Y0OGJhNmExIj4gPHhtcE1NOkhpc3Rvcnk+IDxyZGY6U2VxPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY3JlYXRlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDpjNmJjZjAwMS0yNzhjLTMyNGItODViZi03ZGU3ZjQ4YmE2YTEiIHN0RXZ0OndoZW49IjIwMjEtMDQtMDhUMTc6NDY6MDQtMDc6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyMS4wIChXaW5kb3dzKSIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz6iNfxjAAAA/ElEQVRoge1Yyw6DMAwr0/7/l7vT0OjUqDS2o4j4iiBx7Tzo0XtvmfGKTsCLIhCNIhCNt/N9RQs7rIceBVT914yzS0A9PKbxvBYaYcq9iFuHgyKASHz81hKR9F0IQQB5+re/WwpEIz0BdBsd8dtJKLWiVIAy/NQWgpPYtZDHDt35/gVsBWaJwpRQWIhKwrKQYuN02yn9HCgC0bBqADk5Z/XkjqFQgJZ8a3wC1ORb25/EniUNutSpixi+kSoJUNZp9v8A63/5RPo5UASigSDA2lqfcTOH6kLf00p7ubsVHIFdC9H7+2o8Tw2oSJhxvBZSK/GH9F2oCESjCETjAzDEG3g5QyJ0AAAAAElFTkSuQmCC'
delete_button = b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAACXBIWXMAAAsTAAALEwEAmpwYAAAFFmlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxNDggNzkuMTY0MDM2LCAyMDE5LzA4LzEzLTAxOjA2OjU3ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjEuMCAoV2luZG93cykiIHhtcDpDcmVhdGVEYXRlPSIyMDIxLTA0LTA4VDE4OjIyOjU4LTA3OjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyMS0wNC0wOFQxODozMjo0OS0wNzowMCIgeG1wOk1ldGFkYXRhRGF0ZT0iMjAyMS0wNC0wOFQxODozMjo0OS0wNzowMCIgZGM6Zm9ybWF0PSJpbWFnZS9wbmciIHBob3Rvc2hvcDpDb2xvck1vZGU9IjMiIHBob3Rvc2hvcDpJQ0NQcm9maWxlPSJzUkdCIElFQzYxOTY2LTIuMSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpmZDVhYjUzOS1kNjYwLTg3NDUtOTRjNS1hZmI5M2FjODE5MWMiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6ZmQ1YWI1MzktZDY2MC04NzQ1LTk0YzUtYWZiOTNhYzgxOTFjIiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6ZmQ1YWI1MzktZDY2MC04NzQ1LTk0YzUtYWZiOTNhYzgxOTFjIj4gPHhtcE1NOkhpc3Rvcnk+IDxyZGY6U2VxPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY3JlYXRlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDpmZDVhYjUzOS1kNjYwLTg3NDUtOTRjNS1hZmI5M2FjODE5MWMiIHN0RXZ0OndoZW49IjIwMjEtMDQtMDhUMTg6MjI6NTgtMDc6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyMS4wIChXaW5kb3dzKSIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz5OT+63AAAA7UlEQVRIie2WzU7DMBCEv0kMAlW9gjhw6fu/XoWQQqaHrCFy7TZA0lNHWim72nj2x/ZattkS3aarA6k0SKr59baHwi8BX9cIVCnRf2umeZC3LxEgfrKo1quCpv/mGZwRlE0O3SEtvfn/7TO4E9wJfo3aSf4Lmid+lQxUuYLzJboGQW971IRse2I66WlpicoI5/ooqQuSRwDbH5I6QGv0wLbJJACSnokhdY3A5UAqdMWCAA8z+2h7kNTswdI5kLG3/SnpTdIhvl++I5pLzXZJgF2k+RqB9cB72NLZTM47YelzJpq5A47RaJh2ZwKGEyQGhMG1iouQAAAAAElFTkSuQmCC'
copy_button = b'iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFFmlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxNDggNzkuMTY0MDM2LCAyMDE5LzA4LzEzLTAxOjA2OjU3ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjEuMCAoV2luZG93cykiIHhtcDpDcmVhdGVEYXRlPSIyMDIxLTA0LTA4VDE4OjE2OjM0LTA3OjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyMS0wNC0wOFQyMjo1NjoxNy0wNzowMCIgeG1wOk1ldGFkYXRhRGF0ZT0iMjAyMS0wNC0wOFQyMjo1NjoxNy0wNzowMCIgZGM6Zm9ybWF0PSJpbWFnZS9wbmciIHBob3Rvc2hvcDpDb2xvck1vZGU9IjMiIHBob3Rvc2hvcDpJQ0NQcm9maWxlPSJzUkdCIElFQzYxOTY2LTIuMSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo3ZDFmOGQ0OC1iYmI1LTk1NDMtYmQ2Zi1hMTQzNDUyNzAxN2MiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6N2QxZjhkNDgtYmJiNS05NTQzLWJkNmYtYTE0MzQ1MjcwMTdjIiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6N2QxZjhkNDgtYmJiNS05NTQzLWJkNmYtYTE0MzQ1MjcwMTdjIj4gPHhtcE1NOkhpc3Rvcnk+IDxyZGY6U2VxPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY3JlYXRlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo3ZDFmOGQ0OC1iYmI1LTk1NDMtYmQ2Zi1hMTQzNDUyNzAxN2MiIHN0RXZ0OndoZW49IjIwMjEtMDQtMDhUMTg6MTY6MzQtMDc6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyMS4wIChXaW5kb3dzKSIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz7usN14AAABG0lEQVRoge2Z3Q6DIAyFy7KYuO29vPNOnkefvF74k8URbQulM+mXcEPogWMFTQmICHfmYb2AXNyANbc38MyM1zwBAmVQTga0jy+SvtRArbP3cp5ieyDG+IIl7aK2xrMJwg/ZMYj0vmpoUzOACWEA2J98Mbh6lAx8DwgnfSUh69/+O+AGrHED1rgBa9yANW7AGjdgjRuwxg1Y4wascQMxxrbEQsR6iHjVdsZxbI59KxQdamNpSwV/GIahzVn4Gp/iNI5bFwJY6jQ176VU6kIaxSzRPBID29PXNkHSpxZ3U4NqZeEUUga6rvskureCL07T1BRdFQNOeb3GxmVnlbMHQt/3b+4E2pS64CiBaE9Jbyn/YgMD+M+cPW7Amhld8WZq+nEYWAAAAABJRU5ErkJggg=='
details_button = b'iVBORw0KGgoAAAANSUhEUgAAABoAAAAaCAYAAACpSkzOAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFFmlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxNDggNzkuMTY0MDM2LCAyMDE5LzA4LzEzLTAxOjA2OjU3ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjEuMCAoV2luZG93cykiIHhtcDpDcmVhdGVEYXRlPSIyMDIxLTA0LTA5VDE1OjUyOjEyLTA3OjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyMS0wNC0wOVQxNTo1MzozOS0wNzowMCIgeG1wOk1ldGFkYXRhRGF0ZT0iMjAyMS0wNC0wOVQxNTo1MzozOS0wNzowMCIgZGM6Zm9ybWF0PSJpbWFnZS9wbmciIHBob3Rvc2hvcDpDb2xvck1vZGU9IjMiIHBob3Rvc2hvcDpJQ0NQcm9maWxlPSJzUkdCIElFQzYxOTY2LTIuMSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpmNmE2ZjYwMy1mZTJhLWE2NDMtODQ0NC03MTQzNDRiNTUwODIiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6ZjZhNmY2MDMtZmUyYS1hNjQzLTg0NDQtNzE0MzQ0YjU1MDgyIiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6ZjZhNmY2MDMtZmUyYS1hNjQzLTg0NDQtNzE0MzQ0YjU1MDgyIj4gPHhtcE1NOkhpc3Rvcnk+IDxyZGY6U2VxPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY3JlYXRlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDpmNmE2ZjYwMy1mZTJhLWE2NDMtODQ0NC03MTQzNDRiNTUwODIiIHN0RXZ0OndoZW49IjIwMjEtMDQtMDlUMTU6NTI6MTItMDc6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyMS4wIChXaW5kb3dzKSIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz78BtuQAAAAaklEQVRIie2WQQ6AIAzAOuP/n+y8SDSTCOqWELLediqDHhBVBRBgIwYBWI4hSgKgAGvN7i2Bc6NwUvQZG8OV8pBi5hbVoIbYyJ7sV/oZQw8Zgy9DXF3G8Mh8McwnsjH0JvyaspH3N+vm2AHbAQ5G4PrlmQAAAABJRU5ErkJggg=='

# Style Sheets
categoriesstyle = """
    QListView {
        border: 0px;
        color: rgb(142, 146, 151);
        background-color: rgb(32, 34, 37);
        outline: 0;
        padding: 2px;
        font: 33pt;
    }
    QListView:item:selected {
        background-color: rgb(57, 60, 67);
        color: rgb(255, 255, 255);
        border-radius: 15px;
    }
    QListView:item:!selected:hover {
        background-color: rgb(52, 55, 60);
        color: rgb(220, 221, 222);
        border-radius: 15px;
    }
"""
substyle = """
    QListView {
        border: 0px;
        border-radius: 10px;
        color: rgb(142, 146, 151);
        background-color: rgb(47, 49, 54);
        outline: 0;
        padding: 5px;
        font: 16pt;
    }
    QListView:item:selected {
        background-color: rgb(57, 60, 67);
        color: rgb(255, 255, 255);
        border-radius: 10px;
    }
    QListView:item:!selected:hover {
        background-color: rgb(52, 55, 60);
        color: rgb(220, 221, 222);
        border-radius: 10px;
    }
"""
submenustyle = """
    QWidget {
        background: rgb(47, 49, 54);
        border-radius: 10px;
    }
    QPushButton {
        color: rgb(142, 146, 151);
        background: rgb(47, 49, 54);
        font: 14pt;
    }
    QPushButton:hover {
        background-color: rgb(57, 60, 67);
        color: white;
        border-radius: 10px;
    }
"""
checkeroptionssstyle = """
    QComboBox {
        color: white;
        background-color: rgb(47, 49, 54);
        font: 12pt;
        border: 1px solid rgb(66, 69, 74);
        padding: 5px
    }
    QComboBox QAbstractItemView {
        color: rgb(220, 221, 222);
        selection-color: rgb(220, 221, 222);
        selection-background-color: rgb(52, 55, 60);
        background: rgb(47, 49, 54);
        outline: 0;
    }
    QComboBox:drop-down {
        background: 0;
    }
"""
scrollbarstyle = """
    QScrollBar:vertical {
        border: none;
        width: 10px;
        margin: 0px 0 0px 0;
    }
    QScrollBar::handle:vertical {
        background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(32, 34, 37), stop: 0.5 rgb(32, 34, 37), stop:1 rgb(32, 34, 37));
        min-height: 20px;
        border-radius: 5px;
    }
    QScrollBar::add-line:vertical {
        background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(32, 34, 37), stop: 0.5 rgb(32, 34, 37),  stop:1 rgb(32, 34, 37));
        height: 0px;
        subcontrol-position: bottom;
        subcontrol-origin: margin;
    }
    QScrollBar::sub-line:vertical {
        background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0  rgb(32, 34, 37), stop: 0.5 rgb(32, 34, 37),  stop:1 rgb(32, 34, 37));
        height: 0 px;
        subcontrol-position: top;
        subcontrol-origin: margin;
    }
    QScrollBar:add-page:vertical, QScrollBar:sub-page:vertical {
        background: rgb(46, 51, 56);
    }
    QScrollBar:horizontal {
        border: none;
        height: 10px;
        margin: 0px 0 0px 0;
    }
    QScrollBar::handle:horizontal {
        background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(32, 34, 37), stop: 0.5 rgb(32, 34, 37), stop:1 rgb(32, 34, 37));
        min-width: 20px;
        border-radius: 5px;
    }
    QScrollBar::add-line:horizontal {
        background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(32, 34, 37), stop: 0.5 rgb(32, 34, 37),  stop:1 rgb(32, 34, 37));
        height: 0px;
        subcontrol-position: right;
        subcontrol-origin: margin;
    }
    QScrollBar::sub-line:horizontal {
        background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0  rgb(32, 34, 37), stop: 0.5 rgb(32, 34, 37),  stop:1 rgb(32, 34, 37));
        height: 0 px;
        subcontrol-position: left;
        subcontrol-origin: margin;
    }
    QScrollBar:add-page:horizontal, QScrollBar:sub-page:horizontal {
        background: rgb(46, 51, 56);
    }
"""

def iconFromBase64(base64):
    pixmap = QPixmap()
    pixmap.loadFromData(QByteArray.fromBase64(base64))
    icon = QIcon(pixmap)
    return icon


def pixmapFromBase64(base64):
    pixmap = QPixmap()
    pixmap.loadFromData(QByteArray.fromBase64(base64))
    return pixmap


logFile = f'data/logs/log-{datetime.datetime.now().strftime("%Y%m%d%H%M%S")}.txt'
def logMessage(type, message):
    def getTime():
        return datetime.datetime.now().strftime('%H:%M:%S')
    types = {
        0: [f"{Fore.GREEN}[+]|{getTime()}|Info: ", f"[+]|{getTime()}|Info: "],
        1: [f"{Fore.YELLOW}[-]|{getTime()}|Warning: ", f"[-]|{getTime()}|Warning: "],
        2: [f"{Fore.RED}[!]|{getTime()}|Error: ", f"[!]|{getTime()}|Error: "]
    }
    print_text = f"{types[type][0]}{message}{Fore.RESET}"
    log_text = f"{types[type][1]}{message}"
    print(print_text)
    with open(logFile, 'a') as f:
        f.write(log_text + "\n")


class window(QMainWindow):
    showlogin = True
    showmenu = False
    headers = {
        "content-type": "application/json",
        "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36 Edg/89.0.774.50"
    }

    def __init__(self):
        super(window, self).__init__()
        self.resize(500, 300)
        self.setWindowTitle('Eclipze')
        self.setWindowIcon(iconFromBase64(eclipze_icon))
        self.setStyleSheet("background-color: rgb(54, 57, 63)")
        self.login()

    def login(self):
        self.setFixedSize(500, 300)
        self.textlogin = QLabel(self)
        self.textlogin.setText("Login")
        self.textlogin.resize(100, 200)
        self.textlogin.setAlignment(Qt.AlignCenter)
        self.textlogin.setStyleSheet("color: white; font: 20pt;")
        self.textlogin.setFocus()
        self.loginkey = QLineEdit(self)
        self.loginkey.setPlaceholderText("Key")
        self.loginkey.resize(280, 40)
        self.loginkey.returnPressed.connect(self.login_auth)
        self.loginkey.setAlignment(Qt.AlignCenter)
        self.loginkey.clearFocus()
        self.loginkey.setStyleSheet("color: white; border-radius: 10px; border: 1px solid rgb(66, 69, 74); font: 12pt;")
        self.textloginerror = QLabel(self)
        self.textloginerror.setText("Incorrect Key")
        self.textloginerror.resize(100, 20)
        self.textloginerror.setAlignment(Qt.AlignCenter)
        self.textloginerror.setStyleSheet("color: red; font: 12pt;")
        self.loginkey.move(110, 130)
        self.textlogin.move(200, 0)
        self.textloginerror.move(200, 190)
        self.show()
        self.textloginerror.hide()
        self.showlogin = True

    def loginhide(self):
        self.loginkey.hide()
        self.textlogin.hide()
        self.textloginerror.hide()
        self.showlogin = False

    def login_auth(self):
        try:
            self.loginhide()
            # auth.Login("testing", "testing")
            self.mainmenu()
        except Exception as e:
            print(e)
            self.textloginerror.show()

    def mainmenu(self):
        self.setFocus()
        self.showmenu = True
        self.setFixedSize(800, 500)
        qtRectangle = self.frameGeometry()
        centerPoint = QDesktopWidget().availableGeometry().center()
        qtRectangle.moveCenter(centerPoint)
        self.move(qtRectangle.topLeft())
        self.menu_categories = QListWidget(self)
        self.menu_categories.resize(54, self.rect().height())
        self.menu_categories.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.menu_categories.currentRowChanged.connect(self.menu_select)
        self.menu_categories.setSpacing(1)
        self.menu_categories.setStyleSheet(categoriesstyle)
        # ▽ ᛋ ⛭ ☠ ⧻ ⧺ ⨹ ⨮ ＋ ∅ ⧉ ⎋
        # home
        self.home_category = QListWidgetItem("▽")
        self.home_category.setTextAlignment(Qt.AlignCenter)
        self.home_category.setSizeHint(QSize(54, 50))
        self.home_category.setToolTip("Home")
        # gen
        self.gen_category = QListWidgetItem("ᛋ")
        self.gen_category.setTextAlignment(Qt.AlignCenter)
        self.gen_category.setSizeHint(QSize(54, 50))
        self.gen_category.setToolTip("Account Generator")
        # tokens
        self.token_category = QListWidgetItem("⧉")
        self.token_category.setTextAlignment(Qt.AlignCenter)
        self.token_category.setSizeHint(QSize(54, 50))
        self.token_category.setToolTip("Tokens")
        # add to menu categories
        self.menu_categories.insertItem(0, self.home_category)
        self.menu_categories.insertItem(1, self.gen_category)
        self.menu_categories.insertItem(2, self.token_category)
        self.menu_categories.setCurrentRow(0)
        self.menu_categories.show()

        # menu category
        self.menu_category = QStackedWidget(self)
        self.menu_category.resize(self.rect().width() - 74, 50)
        self.menu_category.move(64, 10)

        # menu container
        self.main_container = QStackedWidget(self)
        self.main_container.resize(self.rect().width() - 74, self.rect().height() - 80)
        self.main_container.move(64, 70)

        # home
        self.home = QListWidget()
        self.home.setFlow(QListWidget.LeftToRight)
        self.home.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.home.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.home.currentRowChanged.connect(self.home_select)
        self.home.setSpacing(5)
        self.home.setStyleSheet(substyle)
        self.home.insertItem(0, "Home")
        self.home.insertItem(1, "Changelog")
        self.home.setCurrentRow(0)
        # home sub
        self.home_sub = QStackedWidget()
        #  home welcome
        self.home_welcome = QWidget()
        self.home_welcome.layout = QVBoxLayout()
        self.home_welcome.layout.setAlignment(Qt.AlignCenter)
        # home welcome logo
        self.home_welcome.logo = QLabel()
        self.home_welcome.logo.resize(QSize(100, 100))
        self.home_welcome.logo.setAlignment(Qt.AlignCenter)
        self.home_welcome.welcome_image = QPixmap()
        self.home_welcome.welcome_image.loadFromData(QByteArray.fromBase64(eclipze_image))
        self.home_welcome.logo_pixmap = self.home_welcome.welcome_image.scaledToWidth(100)
        self.home_welcome.logo.setPixmap(self.home_welcome.logo_pixmap)
        # home welcome text
        self.home_welcome.text = QWidget()
        self.home_welcome.text.setStyleSheet("color: white; font: 20px;")
        self.home_welcome.text.layout = QVBoxLayout()
        self.home_welcome.text.announcement = QLabel(f"Announcement:\ntemporary announcement")
        self.home_welcome.text.announcement.setAlignment(Qt.AlignCenter)
        self.home_welcome.text.subscription = QWidget()
        self.home_welcome.text.subscription.layout = QHBoxLayout()
        self.home_welcome.text.subscription.layout.setSpacing(100)
        self.home_welcome.text.subscription_type = QLabel("Subscription Type:\ntemporary sub")
        self.home_welcome.text.subscription_type.setAlignment(Qt.AlignCenter)
        self.home_welcome.text.subscription_time = QLabel("Time Remaining:\ntemporary time")
        self.home_welcome.text.subscription_time.setAlignment(Qt.AlignCenter)
        self.home_welcome.text.subscription.layout.addWidget(self.home_welcome.text.subscription_type)
        self.home_welcome.text.subscription.layout.addWidget(self.home_welcome.text.subscription_time)
        self.home_welcome.text.subscription.setLayout(self.home_welcome.text.subscription.layout)
        self.home_welcome.text.layout.addWidget(self.home_welcome.text.announcement)
        self.home_welcome.text.layout.addWidget(self.home_welcome.text.subscription)
        self.home_welcome.text.setLayout(self.home_welcome.text.layout)
        # home welcome links
        self.home_welcome.links = QWidget()
        self.home_welcome.links.layout = QHBoxLayout()
        self.home_welcome.links.discord = QToolButton()
        self.home_welcome.links.discord.setIcon(iconFromBase64(discord_icon))
        self.home_welcome.links.discord.setIconSize(QSize(50, 50))
        self.home_welcome.links.discord.setStyleSheet("border: 0px;")
        self.home_welcome.links.discord.clicked.connect(lambda: webbrowser.open(discord_invite))
        self.home_welcome.links.website = QToolButton()
        self.home_welcome.links.website.setIcon(iconFromBase64(website_icon))
        self.home_welcome.links.website.setIconSize(QSize(50, 50))
        self.home_welcome.links.website.setStyleSheet("border: 0px;")
        self.home_welcome.links.website.clicked.connect(lambda: webbrowser.open(website_link))
        self.home_welcome.links.layout.addWidget(self.home_welcome.links.discord)
        self.home_welcome.links.layout.addWidget(self.home_welcome.links.website)
        self.home_welcome.links.layout.setSpacing(100)
        self.home_welcome.links.setLayout(self.home_welcome.links.layout)
        # home set layout to welcome
        self.home_welcome.layout.addWidget(self.home_welcome.logo, 2)
        self.home_welcome.layout.addWidget(self.home_welcome.text, 2)
        self.home_welcome.layout.addWidget(self.home_welcome.links, 1)
        self.home_welcome.setLayout(self.home_welcome.layout)
        # home changelog
        self.home_changelog = QWidget()
        self.home_changelog.layout = QGridLayout()
        self.home_changelog.temp_button = QPushButton("changelog")
        self.home_changelog.layout.addWidget(self.home_changelog.temp_button)
        self.home_changelog.setLayout(self.home_changelog.layout)
        # add to home sub
        self.home_sub.addWidget(self.home_welcome)
        self.home_sub.addWidget(self.home_changelog)

        # gen
        self.gen = QListWidget()
        self.gen.setFlow(QListWidget.LeftToRight)
        self.gen.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.gen.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.gen.currentRowChanged.connect(self.gen_select)
        self.gen.setSpacing(5)
        self.gen.setStyleSheet(substyle)
        self.gen.insertItem(0, "Generator")
        self.gen.insertItem(1, "Verifier")
        self.gen.setCurrentRow(0)
        # gen sub
        self.gen_sub = QStackedWidget()
        self.gen_sub.resize(self.rect().width() - 74, self.rect().height() - 80)
        self.gen_sub.move(64, 70)
        # gen gen
        self.gen_gen = QWidget()
        self.gen_gen.layout = QGridLayout()
        self.gen_gen.temp_button = QPushButton("gen")
        self.gen_gen.layout.addWidget(self.gen_gen.temp_button)
        self.gen_gen.setLayout(self.gen_gen.layout)
        # add to gen sub
        self.gen_sub.addWidget(self.gen_gen)

        # tokens
        self.tokens = QListWidget()
        self.tokens.setFlow(QListWidget.LeftToRight)
        self.tokens.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.tokens.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.tokens.currentRowChanged.connect(self.tokens_select)
        self.tokens.setSpacing(5)
        self.tokens.setStyleSheet(substyle)
        self.tokens.insertItem(0, "Raid/Spam")
        self.tokens.insertItem(1, "Accounts")
        self.tokens.setCurrentRow(0)
        # tokens sub
        self.tokens_sub = QStackedWidget()
        self.tokens_sub.resize(self.rect().width() - 74, self.rect().height() - 80)
        self.tokens_sub.move(64, 70)
        # tokens raid
        self.tokens_raid = QWidget()
        self.tokens_raid.submenu_layout = QVBoxLayout(self.tokens_raid)
        self.tokens_raid.options = QWidget()
        self.tokens_raid.options.setStyleSheet("background: rgb(47, 49, 54); border-radius: 10px;")
        self.tokens_raid.options.layout = QHBoxLayout(self.tokens_raid.options)
        self.tokens_raid.options.layout.setAlignment(Qt.AlignLeft)
        self.tokens_raid.options.layout.setContentsMargins(10, 0, 10, 0)
        self.tokens_raid.options.proxy_text = QLabel('Proxies')
        self.tokens_raid.options.proxy_text.setStyleSheet("color: white; font: 12pt")
        self.tokens_raid.options.proxy_toggle = AnimatedToggle(checked_color="#3e82e5")
        self.tokens_raid.options.proxy_toggle.setFixedSize(70, 50)
        self.tokens_raid.options.proxy_count = QLabel()
        self.tokens_raid.options.proxy_count.setStyleSheet("color:white; font: 12pt")
        self.refresh_proxy_count()
        tokens_raid_style = """
        QPushButton {
            color: rgb(142, 146, 151);
            background: rgb(47, 49, 54);
            font: 12pt;
            padding: 5px;
        }
        QPushButton:hover {
            background-color: rgb(57, 60, 67);
            color: white;
            border-radius: 10px;
        }"""
        self.tokens_raid.options.proxy_select = QPushButton()
        self.tokens_raid.options.proxy_select.setText("Select Proxies")
        self.tokens_raid.options.proxy_select.setStyleSheet(tokens_raid_style)
        self.tokens_raid.options.proxy_select.clicked.connect(lambda: self.select_proxy_clicked())
        self.tokens_raid.options.proxy_check = QPushButton()
        self.tokens_raid.options.proxy_check.setText("Check Proxies")
        self.tokens_raid.options.proxy_check.setStyleSheet(tokens_raid_style)
        self.tokens_raid.options.proxy_check.clicked.connect(lambda: self.check_proxy_clicked())
        self.tokens_raid.options.layout.addWidget(self.tokens_raid.options.proxy_text)
        self.tokens_raid.options.layout.addWidget(self.tokens_raid.options.proxy_toggle)
        self.tokens_raid.options.layout.addWidget(self.tokens_raid.options.proxy_count)
        self.tokens_raid.options.layout.addWidget(self.tokens_raid.options.proxy_select)
        self.tokens_raid.options.layout.addWidget(self.tokens_raid.options.proxy_check)
        self.tokens_raid.submenu_layout.addWidget(self.tokens_raid.options, 1)
        self.tokens_raid.modules = QWidget()
        self.tokens_raid.layout = QHBoxLayout(self.tokens_raid.modules)
        self.tokens_raid.layout.setContentsMargins(0, 0, 0, 0)
        self.tokens_raid.submenu_layout.addWidget(self.tokens_raid.modules, 15)
        self.tokens_raid.column1 = QWidget()
        self.tokens_raid.column1.layout = QVBoxLayout(self.tokens_raid.column1)
        self.tokens_raid.column1.layout.setContentsMargins(0, 5, 5, 5)
        self.tokens_raid.column1.layout.setAlignment(Qt.AlignTop)
        self.tokens_raid.column2 = QWidget()
        self.tokens_raid.column2.layout = QVBoxLayout(self.tokens_raid.column2)
        self.tokens_raid.column2.layout.setContentsMargins(5, 5, 5, 5)
        self.tokens_raid.column2.layout.setAlignment(Qt.AlignTop)
        self.tokens_raid.column3 = QWidget()
        self.tokens_raid.column3.layout = QVBoxLayout(self.tokens_raid.column3)
        self.tokens_raid.column3.layout.setContentsMargins(5, 5, 0, 5)
        self.tokens_raid.column3.layout.setAlignment(Qt.AlignTop)

        # tokens raid modules
        tokens_raid_style = """
        background: rgb(47, 49, 54);
        border-radius: 10px;
        color: white;
        """

        self.tokens_raid.joinServer = QWidget()
        # self.tokens_raid.joinServer.setFixedWidth(200)
        self.tokens_raid.joinServer.setStyleSheet(tokens_raid_style)
        self.tokens_raid.joinServer.layout = QVBoxLayout(self.tokens_raid.joinServer)
        self.tokens_raid.joinServer.title = QLabel('Join Server')
        self.tokens_raid.joinServer.title.setAlignment(Qt.AlignCenter)
        self.tokens_raid.joinServer.title.setStyleSheet("font: 15pt")
        self.tokens_raid.joinServer.input = QLineEdit()
        self.tokens_raid.joinServer.input.setPlaceholderText("Server Invite")
        self.tokens_raid.joinServer.input.setAlignment(Qt.AlignCenter)
        self.tokens_raid.joinServer.input.setStyleSheet("color: white; border-radius: 5px; border: 1px solid rgb(66, 69, 74); font: 12pt;")
        self.tokens_raid.joinServer.join = QPushButton('Join')
        # self.tokens_raid.joinServer.join.clicked.connect()
        self.tokens_raid.joinServer.join.setFixedSize(75, 30)
        self.tokens_raid.joinServer.join.setStyleSheet("background: rgb(57, 60, 67); font: 12pt; border-radius: 5px;")
        self.tokens_raid.joinServer.layout.addWidget(self.tokens_raid.joinServer.title)
        self.tokens_raid.joinServer.layout.addWidget(self.tokens_raid.joinServer.input)
        self.tokens_raid.joinServer.layout.addWidget(self.tokens_raid.joinServer.join, 0, Qt.AlignCenter)

        self.tokens_raid.leaveServer = QWidget()
        self.tokens_raid.leaveServer.setStyleSheet(tokens_raid_style)
        self.tokens_raid.leaveServer.layout = QVBoxLayout(self.tokens_raid.leaveServer)
        self.tokens_raid.leaveServer.title = QLabel('Leave Server')
        self.tokens_raid.leaveServer.title.setAlignment(Qt.AlignCenter)
        self.tokens_raid.leaveServer.title.setStyleSheet("font: 15pt;")
        self.tokens_raid.leaveServer.input = QLineEdit()
        self.tokens_raid.leaveServer.input.setPlaceholderText("Server ID")
        self.tokens_raid.leaveServer.input.setAlignment(Qt.AlignCenter)
        self.tokens_raid.leaveServer.input.setStyleSheet("color: white; border-radius: 5px; border: 1px solid rgb(66, 69, 74); font: 12pt;")
        self.tokens_raid.leaveServer.join = QPushButton('Leave')
        # self.tokens_raid.leaveServer.join.clicked.connect()
        self.tokens_raid.leaveServer.join.setFixedSize(75, 30)
        self.tokens_raid.leaveServer.join.setStyleSheet("background: rgb(57, 60, 67); font: 12pt; border-radius: 5px;")
        self.tokens_raid.leaveServer.layout.addWidget(self.tokens_raid.leaveServer.title)
        self.tokens_raid.leaveServer.layout.addWidget(self.tokens_raid.leaveServer.input)
        self.tokens_raid.leaveServer.layout.addWidget(self.tokens_raid.leaveServer.join, 0, Qt.AlignCenter)

        self.tokens_raid.sendMessage = QWidget()
        self.tokens_raid.sendMessage.setStyleSheet(tokens_raid_style)
        self.tokens_raid.sendMessage.layout = QVBoxLayout(self.tokens_raid.sendMessage)
        self.tokens_raid.sendMessage.title = QLabel('Send Message')
        self.tokens_raid.sendMessage.title.setAlignment(Qt.AlignCenter)
        self.tokens_raid.sendMessage.title.setStyleSheet("font: 15pt;")
        self.tokens_raid.sendMessage.inputChannelId = QLineEdit()
        self.tokens_raid.sendMessage.inputChannelId.setPlaceholderText('Channel ID')
        self.tokens_raid.sendMessage.inputChannelId.setAlignment(Qt.AlignCenter)
        self.tokens_raid.sendMessage.inputChannelId.setStyleSheet("color: white; border-radius: 5px; border: 1px solid rgb(66, 69, 74); font: 12pt;")
        self.tokens_raid.sendMessage.inputMessage = QLineEdit()
        self.tokens_raid.sendMessage.inputMessage.setPlaceholderText('Message')
        self.tokens_raid.sendMessage.inputMessage.setAlignment(Qt.AlignCenter)
        self.tokens_raid.sendMessage.inputMessage.setStyleSheet("color: white; border-radius: 5px; border: 1px solid rgb(66, 69, 74); font: 12pt;")
        self.tokens_raid.sendMessage.send = QPushButton('Send')
        # self.tokens_raid.sendMessage.send.clicked.connect()
        self.tokens_raid.sendMessage.send.setFixedSize(75, 30)
        self.tokens_raid.sendMessage.send.setStyleSheet("background: rgb(57, 60, 67); font: 12pt; border-radius: 5px;")
        self.tokens_raid.sendMessage.layout.addWidget(self.tokens_raid.sendMessage.title)
        self.tokens_raid.sendMessage.layout.addWidget(self.tokens_raid.sendMessage.inputChannelId)
        self.tokens_raid.sendMessage.layout.addWidget(self.tokens_raid.sendMessage.inputMessage)
        self.tokens_raid.sendMessage.layout.addWidget(self.tokens_raid.sendMessage.send, 0, Qt.AlignCenter)

        self.tokens_raid.sendDm = QWidget()
        self.tokens_raid.sendDm.setStyleSheet(tokens_raid_style)
        self.tokens_raid.sendDm.layout = QVBoxLayout(self.tokens_raid.sendDm)
        self.tokens_raid.sendDm.title = QLabel('Send DM')
        self.tokens_raid.sendDm.title.setAlignment(Qt.AlignCenter)
        self.tokens_raid.sendDm.title.setStyleSheet("font: 15pt;")
        self.tokens_raid.sendDm.inputUserId = QLineEdit()
        self.tokens_raid.sendDm.inputUserId.setPlaceholderText('User ID')
        self.tokens_raid.sendDm.inputUserId.setAlignment(Qt.AlignCenter)
        self.tokens_raid.sendDm.inputUserId.setStyleSheet("color: white; border-radius: 5px; border: 1px solid rgb(66, 69, 74); font: 12pt;")
        self.tokens_raid.sendDm.inputMessage = QLineEdit()
        self.tokens_raid.sendDm.inputMessage.setPlaceholderText('Message')
        self.tokens_raid.sendDm.inputMessage.setAlignment(Qt.AlignCenter)
        self.tokens_raid.sendDm.inputMessage.setStyleSheet("color: white; border-radius: 5px; border: 1px solid rgb(66, 69, 74); font: 12pt;")
        self.tokens_raid.sendDm.send = QPushButton('Send')
        # self.tokens_raid.sendDm.send.clicked.connect()
        self.tokens_raid.sendDm.send.setFixedSize(75, 30)
        self.tokens_raid.sendDm.send.setStyleSheet("background: rgb(57, 60, 67); font: 12pt; border-radius: 5px;")
        self.tokens_raid.sendDm.layout.addWidget(self.tokens_raid.sendDm.title)
        self.tokens_raid.sendDm.layout.addWidget(self.tokens_raid.sendDm.inputUserId)
        self.tokens_raid.sendDm.layout.addWidget(self.tokens_raid.sendDm.inputMessage)
        self.tokens_raid.sendDm.layout.addWidget(self.tokens_raid.sendDm.send, 0, Qt.AlignCenter)

        # tokens raid column1
        self.tokens_raid.column1.layout.addWidget(self.tokens_raid.joinServer)
        self.tokens_raid.column1.layout.addWidget(self.tokens_raid.leaveServer)
        # tokens raid column2
        self.tokens_raid.column2.layout.addWidget(self.tokens_raid.sendMessage)
        self.tokens_raid.column2.layout.addWidget(self.tokens_raid.sendDm)
        # tokens raid column3
        # tokens raid set layout
        self.tokens_raid.layout.addWidget(self.tokens_raid.column1)
        self.tokens_raid.layout.addWidget(self.tokens_raid.column2)
        self.tokens_raid.layout.addWidget(self.tokens_raid.column3)
        # tokens accounts
        self.tokens_accounts = QWidget()
        self.tokens_accounts.layout = QVBoxLayout(self.tokens_accounts)
        # tokens accounts menu
        self.tokens_accounts.menu = QWidget()
        self.tokens_accounts.menu.setStyleSheet(submenustyle)
        self.tokens_accounts.menu.layout = QHBoxLayout()
        self.tokens_accounts.menu.add = QPushButton('Add')
        self.tokens_accounts.menu.add.setFixedHeight(30)
        self.tokens_accounts.menu.add.clicked.connect(lambda: self.add_account_button_clicked())
        self.tokens_accounts.menu.check = QPushButton('Check')
        self.tokens_accounts.menu.check.setFixedHeight(30)
        self.tokens_accounts.menu.check.clicked.connect(lambda: self.checker_button_clicked())
        self.tokens_accounts.menu.export = QPushButton('Export')
        self.tokens_accounts.menu.export.setFixedHeight(30)
        self.tokens_accounts.menu.export.clicked.connect(lambda: self.export_button_clicked())
        self.tokens_accounts.menu.edit = QPushButton('Edit')
        self.tokens_accounts.menu.edit.setFixedHeight(30)
        self.tokens_accounts.menu.edit.clicked.connect(lambda: self.edit_button_clicked())
        self.tokens_accounts.menu.layout.addWidget(self.tokens_accounts.menu.add)
        self.tokens_accounts.menu.layout.addWidget(self.tokens_accounts.menu.check)
        self.tokens_accounts.menu.layout.addWidget(self.tokens_accounts.menu.export)
        self.tokens_accounts.menu.layout.addWidget(self.tokens_accounts.menu.edit)
        self.tokens_accounts.menu.setLayout(self.tokens_accounts.menu.layout)
        # tokens accounts list
        self.tokens_accounts.listContainer = QWidget()
        self.tokens_accounts.listContainer.setStyleSheet("border: 0px; border-radius: 10px; background: rgb(47, 49, 54);")
        self.tokens_accounts.listLayout = QVBoxLayout(self.tokens_accounts.listContainer)
        self.tokens_accounts.listLayout.setSpacing(0)
        self.tokens_accounts.listCategories = QLabel('    Status                 Token                  Copy       Date Added       Login          Edit         Delete')
        self.tokens_accounts.listCategories.setStyleSheet("color: white; font: 12pt;")
        self.tokens_accounts.list = QListWidget()
        self.tokens_accounts.list.setStyleSheet("""
        QListWidget {
            padding: 10px;
            color: white;
            font: 16px;
            outline: 0;
        }
        QListView:item:selected {
            background-color: rgb(47, 49, 54);
            color: white;
        }
        QListView:item:!selected:hover {
            background-color: rgb(47, 49, 54);
            color: white;
        }
        """ + scrollbarstyle)
        self.tokens_accounts.footer = QWidget()
        self.tokens_accounts.footer.layout = QHBoxLayout(self.tokens_accounts.footer)
        self.tokens_accounts.footer.layout.setAlignment(Qt.AlignLeft)
        self.tokens_accounts.footer.layout.setSpacing(10)
        self.tokens_accounts.listCount = QLabel()
        self.tokens_accounts.listCount.setStyleSheet("color: gray; font: 12pt;")
        self.tokens_accounts.deleteDisabled = QPushButton('Delete Disabled')
        self.tokens_accounts.deleteDisabled.setStyleSheet("color: gray; font: 12pt;")
        self.tokens_accounts.deleteDisabled.clicked.connect(lambda: self.deleteDisabled_button_clicked())
        self.tokens_accounts.enableAll = QPushButton('Enable All')
        self.tokens_accounts.enableAll.setStyleSheet("color: gray; font: 12pt;")
        self.tokens_accounts.enableAll.clicked.connect(lambda: self.enableAll_button_clicked())
        self.tokens_accounts.disableAll = QPushButton('Disable All')
        self.tokens_accounts.disableAll.setStyleSheet("color: gray; font: 12pt;")
        self.tokens_accounts.disableAll.clicked.connect(lambda: self.disableAll_button_clicked())
        self.tokens_accounts.deleteAll = QPushButton('Delete All')
        self.tokens_accounts.deleteAll.setStyleSheet("color: gray; font: 12pt;")
        self.tokens_accounts.deleteAll.clicked.connect(lambda: self.deleteAll_button_clicked())
        self.tokens_accounts.refresh = QPushButton('Refresh')
        self.tokens_accounts.refresh.setStyleSheet("color: gray; font: 12pt;")
        self.tokens_accounts.refresh.clicked.connect(lambda: self.refresh_tokens_list())
        self.tokens_accounts.footer.layout.addWidget(self.tokens_accounts.listCount)
        self.tokens_accounts.footer.layout.addWidget(self.tokens_accounts.deleteDisabled)
        self.tokens_accounts.footer.layout.addWidget(self.tokens_accounts.enableAll)
        self.tokens_accounts.footer.layout.addWidget(self.tokens_accounts.disableAll)
        self.tokens_accounts.footer.layout.addWidget(self.tokens_accounts.deleteAll)
        self.tokens_accounts.footer.layout.addWidget(self.tokens_accounts.refresh)
        self.tokens_accounts.listLayout.addWidget(self.tokens_accounts.listCategories)
        self.tokens_accounts.listLayout.addWidget(self.tokens_accounts.list)
        self.tokens_accounts.listLayout.addWidget(self.tokens_accounts.footer)
        self.refresh_tokens_list()
        # tokens accounts set layout
        self.tokens_accounts.layout.addWidget(self.tokens_accounts.menu)
        self.tokens_accounts.layout.addWidget(self.tokens_accounts.listContainer)
        # add to token sub
        self.tokens_sub.addWidget(self.tokens_raid)
        self.tokens_sub.addWidget(self.tokens_accounts)

        # add to main container
        self.main_container.addWidget(self.home_sub)
        self.main_container.addWidget(self.gen_sub)
        self.main_container.addWidget(self.tokens_sub)
        self.main_container.show()
        # add to menu category
        self.menu_category.addWidget(self.home)
        self.menu_category.addWidget(self.gen)
        self.menu_category.addWidget(self.tokens)
        self.menu_category.show()

    def get_config_file(self):
        with open('data/config.json', 'r') as f:
            config = json.load(f)
        return config

    def get_accounts(self):
        with open('data/tokens.json', 'r') as f:
            token_dict = json.load(f)
        return token_dict

    def get_proxies(self):
        config = self.get_config_file()
        if pathlib.Path(config['proxy_file']).is_file() and config['proxy_file']:
            with open(config['proxy_file'], 'r') as f:
                proxies_raw = [line.rstrip() for line in f]
                proxies = [proxy for proxy in proxies_raw if re.match(r'^(?:(\w+)(?::(\w+))?@)?((?:\d{1,3})(?:\.\d{1,3}){3})(?::(\d{1,5}))?$', proxy)]
            logMessage(0, f'Loaded {len(proxies)} proxies')
            return proxies
        else:
            config['proxy_file'] = ""
            with open('data/config.json', 'w') as f:
                json.dump(config, f, indent=4)
            return []

    def refresh_proxy_count(self):
        self.tokens_raid.options.proxy_count.setText(f"{len(self.get_proxies())} proxies")

    def select_proxy_clicked(self):
        fileName, _ = QFileDialog.getOpenFileName(self, "Select Proxies", "", "Text Files (*.txt)")
        if not fileName:
            return
        config = self.get_config_file()
        config['proxy_file'] = fileName
        with open('data/config.json', 'w') as f:
            json.dump(config, f, indent=4)
        self.refresh_proxy_count()

    def check_proxy_clicked(self):
        pass

    def deleteAll_button_clicked(self):
        with open('data/tokens.json', 'w') as f:
            json.dump({}, f, indent=4)
        self.tokens_accounts.list.clear()
        self.refresh_tokens_count()
        logMessage(0, f'Deleted all accounts')

    def deleteDisabled_button_clicked(self):
        token_dict = self.get_accounts()
        new_dict = {}
        for token in token_dict:
            if token_dict[token]['status'] == 1:
                new_dict[token] = token_dict[token]
        with open('data/tokens.json', 'w') as f:
            json.dump(new_dict, f, indent=4)
        self.refresh_tokens_list()

    def enableAll_button_clicked(self):
        token_dict = self.get_accounts()
        for token in token_dict:
            token_dict[token]['status'] = 1
        with open('data/tokens.json', 'w') as f:
            json.dump(token_dict, f, indent=4)
        self.refresh_tokens_list()

    def disableAll_button_clicked(self):
        token_dict = self.get_accounts()
        for token in token_dict:
            token_dict[token]['status'] = 0
        with open('data/tokens.json', 'w') as f:
            json.dump(token_dict, f, indent=4)
        self.refresh_tokens_list()

    def refresh_tokens_count(self):
        token_dict = self.get_accounts()
        active = []
        for account in token_dict:
            if token_dict[account]['status'] == 1:
                active.append(account)
        if not len(token_dict):
            self.tokens_accounts.list.addItem("No accounts found")
            self.tokens_accounts.listCount.setText("")
        self.tokens_accounts.listCount.setText(f'Total: {len(token_dict)} accounts ({len(active)} active)')

    def refresh_tokens_list(self):  
        logMessage(0, 'Loading accounts')
        with open('data/tokens.json', 'r') as f:
            token_dict = json.load(f)
        self.tokens_accounts.list.clear()
        if len(token_dict):
            start = time.time()
            self.tokens_accounts.list.hide()
            for token in token_dict:
                self.tokens_add_token_to_list(token_dict, token)
            self.tokens_accounts.list.show()
            logMessage(0, f'Finished loading {len(token_dict)} accounts in {round((time.time() - start), 1)} seconds')
        else:
            logMessage(1, 'No accounts found to load')
        self.refresh_tokens_count()

    # 🛈
    def tokens_add_token_to_list(self, token_dict, token):
        item = QListWidgetItem(" " * 5 + token[:20] + "..." if len(token) >= 20 else " " * 5 + token)
        item.setFont(QFont("Courier"))
        item.setSizeHint(QSize(0, 40))
        self.tokens_accounts.list.addItem(item)
        widget = QWidget(self.tokens_accounts.list)
        widget.setStyleSheet("background: 0;")
        status = AnimatedToggle(checked_color="#3e82e5")
        status.setChecked(True if token_dict.get(token).get('status') == 1 else False)
        status.clicked.connect(lambda: self.status_changed(status, token))
        filler = QLabel()
        filler.setFixedSize(210, 0)
        button_copy = QToolButton(widget)
        button_copy.setIcon(iconFromBase64(copy_button))
        button_copy.setIconSize(QSize(20, 20))
        button_copy.setStyleSheet("background: 0; border: 0px;")
        date_added = datetime.datetime.strptime(str(token_dict[token]['date-added']), "%Y%m%d%H%M%S")
        label_added = QLabel(timeago.format(date_added, datetime.datetime.now()))
        label_added.setAlignment(Qt.AlignCenter)
        label_added.setStyleSheet("color: white; font: 16px;")
        button_login = QToolButton(widget)
        button_login.setIcon(iconFromBase64(login_button))
        button_login.setIconSize(QSize(25, 25))
        button_login.setStyleSheet("background: 0; border: 0px;")
        button_edit = QToolButton(widget)
        button_edit.setIcon(iconFromBase64(edit_button))
        button_edit.setIconSize(QSize(25, 25))
        button_edit.setStyleSheet("background: 0; border: 0px;")
        button_delete = QToolButton(widget)
        button_delete.setIcon(iconFromBase64(delete_button))
        button_delete.setIconSize(QSize(25, 25))
        button_delete.setStyleSheet("background: 0; border: 0px;")
        layout = QHBoxLayout()
        layout.setContentsMargins(0, 0, 0, 0)
        layout.addWidget(status)
        layout.addWidget(filler)
        layout.addWidget(button_copy)
        layout.addWidget(label_added, 3)
        layout.addWidget(button_login)
        layout.addStretch(1)
        layout.addWidget(button_edit)
        layout.addStretch(1)
        layout.addWidget(button_delete)
        widget.setLayout(layout)
        self.tokens_accounts.list.setItemWidget(item, widget)
        button_copy.clicked.connect(lambda: self.copy_button_clicked(token))
        button_login.clicked.connect(lambda: self.login_button_clicked(token))
        button_edit.clicked.connect(lambda: self.edit_single_button_clicked(token))
        button_delete.clicked.connect(lambda: self.delete_button_clicked(item, token))

    def add_account_button_clicked(self):
        popup = addAccountPopup(self)
        if popup.exec_():
            token_dict = self.get_accounts()
            token_list = list(token_dict)
            count = 0
            for account in popup.accountInput.toPlainText().splitlines():
                account_split = account.split(':')
                if len(account_split) == 3:
                    if ('@' in account_split[0]) and ('.' in account_split[0]):
                        if (len(account_split[2]) == 59) or (len(account_split[2]) == 88):
                            if account_split[2] not in token_list:
                                token_dict[account_split[2]] = {'status': 1, 'date-added': int(datetime.datetime.now().strftime("%Y%m%d%H%M%S")), 'email': account_split[0], 'password': account_split[1]}
                                count += 1
                            else:
                                logMessage(1, f'Account already found - {account}')
                        else:
                            logMessage(2, f'Invalid token input - {account}')
                    else:
                        logMessage(2, f'Invalid email input - {account}')
                elif len(account_split) == 1:
                    if (len(account_split[0]) == 59) or (len(account_split[0]) == 88):
                        if account_split[0] not in token_list:
                            token_dict[account_split[0]] = {'status': 1, 'date-added': int(datetime.datetime.now().strftime("%Y%m%d%H%M%S")), 'email': '', 'password': ''}
                            count += 1
                        else:
                            logMessage(1, f'Account already found - {account}')
                    else:
                        logMessage(2, f'Invalid token input - {account}')
                else:
                    logMessage(2, f'Invalid input - {account}')
            with open('data/tokens.json', 'w') as f:
                json.dump(token_dict, f, indent=4)
            if count > 0:
                logMessage(0, f'Added {count} new accounts')
                self.refresh_tokens_list()
            else:
                logMessage(0, 'No new accounts added')

    def checker_button_clicked(self):
        popup = checkAccountPopup(self)
        if popup.exec_():
            token_dict = self.get_accounts()
            checked_tokens = self.check_tokens(list(token_dict))
            bad_tokens = checked_tokens[1] + checked_tokens[2]
            if len(bad_tokens) == 0:
                logMessage(0, f'All tokens are working')
            else:
                if len(checked_tokens[0]) > 0:
                    logMessage(0, f'{len(checked_tokens[0])} working tokens')
                if len(checked_tokens[1]) > 0:
                    logMessage(1, f'{len(checked_tokens[1])} tokens require verification')
                if len(checked_tokens[2]) > 0:
                    logMessage(1, f'{len(checked_tokens[2])} tokens are invalid')
                if popup.disableToggle.isChecked():
                    logMessage(0, f'Disabling {len(bad_tokens)} bad tokens')
                    for token in bad_tokens:
                        token_dict[token]['status'] = 0
                with open('data/tokens.json', 'w') as f:
                    json.dump(token_dict, f, indent=4)
                self.refresh_tokens_list()

    def export_button_clicked(self):
        popup = exportPopup(self)
        if popup.exec_():
            token_dict = self.get_accounts()
            if len(token_dict) > 0:
                exportType = popup.switch.isChecked()
                exportName, _ = QFileDialog.getSaveFileName(self, "Account Export", "", "Text Files (*.txt)")
                export = ""
                count = 0
                for token in token_dict:
                    if exportType:
                        if (not token_dict[token]['email']) or (not token_dict[token]['password']):
                            export += f"{''.join(random.choice(string.ascii_letters) for x in range(10)) + '@random.com'}:{''.join(random.choice(string.ascii_letters + string.digits) for x in range(5)) + 'random'}:{token}"
                            count += 1
                        else:
                            export += f"{token_dict[token]['email']}:{token_dict[token]['password']}:{token}"
                    else:
                        export += f"{token}"
                    export += "\n"
                export = export.rstrip()
                try:
                    with open(exportName, 'w') as f:
                        f.write(export)
                    logMessage(0, f'Exported {len(token_dict)} accounts to {exportName}')
                except OSError:
                    pass
                except:
                    logMessage(2, 'Failed to save export')
            else:
                logMessage(1, 'No accounts to export')

    def account_editor(self, token, proxy, new_username, new_pfp, token_dict):
        headers = {
            "authorization": token,
            "content-type": "application/json",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36 Edg/89.0.774.50"
        }
        if new_username:
            password = token_dict[token]['password']
            if password:
                requests.patch("https://discord.com/api/v9/users/@me", headers=headers, data={'username': new_username, 'password': password})
        if new_pfp:
            pfp = open(new_pfp, 'rb').read()
            print(pfp)
            res = requests.patch("https://discord.com/api/v9/users/@me", headers=headers, data={'avatar': pfp})
            print(res.text)

    def edit_button_clicked(self):
        popup = editPopup(self)
        if popup.exec_():
            token_dict = self.get_accounts()
            token_list = [account for account in token_dict if token_dict[account]['status']]
            if popup.proxy_toggle.isChecked():
                proxies = self.get_proxies()
            for token in token_list:
                pass

    def getToken(self, email, password):
        data = json.dumps({"email": email, "password": password})
        return requests.post("https://discordapp.com/api/v8/auth/login", headers=self.headers, data=data).json()

    def status_changed(self, status, token):
        with open('data/tokens.json', 'r') as f:
            token_dict = json.load(f)
        if status.isChecked():
            token_dict[token]['status'] = 1
        else:
            token_dict[token]['status'] = 0
        with open('data/tokens.json', 'w') as f:
            json.dump(token_dict, f, indent=4)
        self.refresh_tokens_count()

    def copy_button_clicked(self, token):
        pyperclip.copy(token)

    def login_button_clicked(self, token):
        try:
            loop = asyncio.get_event_loop()
            loop.run_in_executor(ThreadPoolExecutor(1), self.log_into_token, token)
            loop.run_until_complete(asyncio.gather(asyncio.all_tasks(loop)))
        except:
            pass

    def log_into_token(self, token):
        driver = webdriver.Chrome()
        driver.get("https://discord.com/login")
        script = 'let token= "' + token + '";function login(e){setInterval(()=>{document.body.appendChild(document.createElement`iframe`).contentWindow.localStorage.token=`"${e}"`},50),setTimeout(()=>{location.reload()}, 500)}login(token);'
        driver.execute_script(script)

    def edit_single_button_clicked(self, token):
        popup = editSinglePopup(self)
        if popup.exec_():
            self.account_editor(token, None, None, r"C:\Users\aweso\Desktop\Ariko.Blue\Images\bot pfp.png", self.get_config_file())

    def delete_button_clicked(self, item, token):
        with open('data/tokens.json', 'r') as f:
            token_dict = json.load(f)
        del token_dict[token]
        with open('data/tokens.json', 'w') as f:
            json.dump(token_dict, f, indent=4)
        self.tokens_accounts.list.takeItem(self.tokens_accounts.list.row(item))
        self.refresh_tokens_count()

    def check_tokens(self, token_list):
        def checker(token):
            headers = {
                "content-type": "application/json",
                "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36 Edg/89.0.774.50",
                "authorization": token
            }
            result = requests.get("https://discordapp.com/api/v8/users/@me/guilds", headers=headers).status_code
            if result == 200:
                return {token: 0}
            elif result == 403:
                return {token: 1}
            elif result == 401:
                return {token: 2}
        logMessage(0, f'Checking {len(token_list)} tokens')
        start = time.time()
        with ThreadPoolExecutor(max_workers=len(token_list)) as executor:
            processes = [executor.submit(checker, token) for token in token_list]
        verified_list = []
        unverified_list = []
        invalid_list = []
        for task in as_completed(processes):
            token = list(task.result().keys())[0]
            status = list(task.result().values())[0]
            if status == 0:
                verified_list.append(token)
            elif status == 1:
                unverified_list.append(token)
            elif status == 2:
                invalid_list.append(token)
        logMessage(0, f'Finished checking {len(token_list)} tokens in {round(time.time() - start, 1)} seconds')
        return [verified_list, unverified_list, invalid_list]

    # Menu Button Selections
    def menu_select(self, index):
        try:
            self.menu_category.setCurrentIndex(index)
            self.main_container.setCurrentIndex(index)
        except:
            pass

    def home_select(self, index):
        try:
            self.home_sub.setCurrentIndex(index)
        except:
            pass

    def gen_select(self, index):
        try:
            self.gen_sub.setCurrentIndex(index)
        except:
            pass

    def tokens_select(self, index):
        try:
            self.tokens_sub.setCurrentIndex(index)
        except:
            pass

class addAccountPopup(QWidget):
    def __init__(self, parent):
        super().__init__(parent)
        self.setFocus()
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setAttribute(Qt.WA_StyledBackground)
        self.setAutoFillBackground(True)
        self.setStyleSheet('''
            addAccountPopup {
                background: rgba(0, 0, 0, 0.5);
            }
            QWidget#container {
                border: 0px;
                border-radius: 10px;
                background: rgb(54, 57, 63);
            }
            QWidget#container > QLabel {
                color: white;
                background: 0;
            }
            QLabel#title {
                font: 20pt;
            }
            QLabel#input {
                font:15pt;
            }
            QPushButton#close {
                color: rgb(124, 125, 128);
                font: 20pt bold;
                background: 0;
                border: 0px;
                outline: 0;
            }
            QLabel#formats {
                font: 12pt;
            }
            QPlainTextEdit#inputtext {
                color: white;
                border: 1px solid white;
                border-radius: 4px;
            }
            QPushButton#addButton {
                color: white;
                font: 12pt;
                border: 1px solid white;
                border-radius: 4px;
            }
        ''')

        fullLayout = QVBoxLayout(self)
        self.container = QWidget()
        self.container.setAutoFillBackground(True)
        self.container.setFixedSize(400, 450)
        self.container.setObjectName('container')
        fullLayout.addWidget(self.container, alignment=Qt.AlignCenter)

        self.closeButton = QPushButton('×', self.container)
        self.closeButton.move(370, 10)
        self.closeButton.setObjectName('close')
        self.closeButton.setFixedSize(20, 20)
        self.closeButton.clicked.connect(lambda: self.reject())

        layout = QVBoxLayout(self.container)
        layout.setSpacing(10)
        layout.setContentsMargins(30, 30, 30, 10)

        title = QLabel('Add Account')
        title.setAlignment(Qt.AlignCenter)
        title.setObjectName('title')
        layout.addWidget(title, 1)

        inputFormats = QLabel('email:pass:token\ntoken')
        inputFormats.setAlignment(Qt.AlignCenter)
        inputFormats.setObjectName('formats')

        self.accountInput = QPlainTextEdit()
        self.accountInput.setObjectName('inputtext')
        self.accountInput.setPlaceholderText("Paste accounts here")
        self.accountInput.setWordWrapMode(0)
        self.accountInput.setStyleSheet(scrollbarstyle)
        layout.addWidget(inputFormats, 1)
        layout.addWidget(self.accountInput, 8)

        addButton = QPushButton('Add')
        addButton.setFixedSize(75, 40)
        addButton.setObjectName('addButton')
        addButton.clicked.connect(lambda: self.addButton_clicked())
        layout.addWidget(addButton, 0, Qt.AlignCenter)
        self.accountInput.setFocus()

        parent.installEventFilter(self)
        self.loop = QEventLoop(self)

    def addButton_clicked(self):
        if self.accountInput.toPlainText():
            self.loop.exit(True)
        else:
            logMessage(1, 'No accounts to add')

    def reject(self):
        self.loop.exit(False)

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            self.reject()

    def mouseReleaseEvent(self, event):
        if not self.container.underMouse():
            self.reject()

    def close(self):
        self.loop.quit()

    def showEvent(self, event):
        self.setGeometry(self.parent().rect())

    def exec_(self):
        self.show()
        self.raise_()
        res = self.loop.exec_()
        self.hide()
        return res

class checkAccountPopup(QWidget):
    def __init__(self, parent):
        super().__init__(parent)
        self.setFocus()
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setAttribute(Qt.WA_StyledBackground)
        self.setAutoFillBackground(True)
        self.setStyleSheet('''
            checkAccountPopup {
                background: rgba(0, 0, 0, 0.5);
            }
            QWidget#container {
                border: 0px;
                border-radius: 10px;
                background: rgb(54, 57, 63);
            }
            QWidget#container > QLabel {
                color: white;
                background: 0;
            }
            QLabel#title {
                font: 20pt;
            }
            QLabel#input {
                font:15pt;
            }
            QPushButton#close {
                color: rgb(124, 125, 128);
                font: 20pt bold;
                background: 0;
                border: 0px;
                outline: 0;
            }
            QLabel#disabletext {
                font: 12pt;
            }
            QPushButton#checkButton {
                color: white;
                font: 12pt;
                border: 1px solid white;
                border-radius: 4px;
            }
        ''')

        fullLayout = QVBoxLayout(self)
        self.container = QWidget()
        self.container.setAutoFillBackground(True)
        self.container.setFixedSize(400, 200)
        self.container.setObjectName('container')
        fullLayout.addWidget(self.container, alignment=Qt.AlignCenter)

        self.closeButton = QPushButton('×', self.container)
        self.closeButton.move(370, 10)
        self.closeButton.setObjectName('close')
        self.closeButton.setFixedSize(20, 20)
        self.closeButton.clicked.connect(lambda: self.reject())

        layout = QVBoxLayout(self.container)
        layout.setSpacing(10)
        layout.setContentsMargins(30, 30, 30, 10)

        title = QLabel('Check Accounts')
        title.setAlignment(Qt.AlignCenter)
        title.setObjectName('title')
        layout.addWidget(title, 1)

        disableText = QLabel('Disable unverified and invalid tokens')
        disableText.setAlignment(Qt.AlignCenter)
        disableText.setObjectName('disabletext')

        self.disableToggle = AnimatedToggle(checked_color="#3e82e5")
        self.disableToggle.setFixedSize(70, 50)
        self.disableToggle.setChecked(True)
        self.disableToggle.setObjectName('disabletoggle')
        layout.addWidget(disableText, 1)
        layout.addWidget(self.disableToggle, 1, Qt.AlignCenter)

        checkButton = QPushButton('Check')
        checkButton.setFixedSize(75, 40)
        checkButton.setObjectName('checkButton')
        checkButton.clicked.connect(self.checkButton_clicked)
        layout.addWidget(checkButton, 0, Qt.AlignCenter)

        parent.installEventFilter(self)
        self.loop = QEventLoop(self)

    def checkButton_clicked(self):
        self.loop.exit(True)

    def reject(self):
        self.loop.exit(False)

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            self.reject()

    def mouseReleaseEvent(self, event):
        if not self.container.underMouse():
            self.reject()

    def close(self):
        self.loop.quit()

    def showEvent(self, event):
        self.setGeometry(self.parent().rect())

    def exec_(self):
        self.show()
        self.raise_()
        res = self.loop.exec_()
        self.hide()
        return res

class exportPopup(QWidget):
    def __init__(self, parent):
        super().__init__(parent)
        self.setFocus()
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setAttribute(Qt.WA_StyledBackground)
        self.setAutoFillBackground(True)
        self.setStyleSheet('''
            exportPopup {
                background: rgba(0, 0, 0, 0.5);
            }
            QWidget#container {
                border: 0px;
                border-radius: 10px;
                background: rgb(54, 57, 63);
            }
            QWidget#container > QLabel {
                color: white;
                background: 0;
            }
            QLabel#title {
                font: 20pt;
            }
            QLabel#input {
                font:15pt;
            }
            QPushButton#close {
                color: rgb(124, 125, 128);
                font: 20pt bold;
                background: 0;
                border: 0px;
                outline: 0;
            }
            QLabel#exporttext {
                font: 12pt;
            }
            QPushButton#exportButton {
                color: white;
                font: 12pt;
                border: 1px solid white;
                border-radius: 4px;
            }
        ''')

        fullLayout = QVBoxLayout(self)
        self.container = QWidget()
        self.container.setAutoFillBackground(True)
        self.container.setFixedSize(400, 210)
        self.container.setObjectName('container')
        fullLayout.addWidget(self.container, alignment=Qt.AlignCenter)

        self.closeButton = QPushButton('×', self.container)
        self.closeButton.move(370, 10)
        self.closeButton.setObjectName('close')
        self.closeButton.setFixedSize(20, 20)
        self.closeButton.clicked.connect(lambda: self.reject())

        layout = QVBoxLayout(self.container)
        layout.setSpacing(10)
        layout.setContentsMargins(30, 30, 30, 10)

        title = QLabel('Export Enabled Accounts')
        title.setAlignment(Qt.AlignCenter)
        title.setObjectName('title')
        layout.addWidget(title, 1)

        exportText = QLabel('Export Format')
        exportText.setAlignment(Qt.AlignCenter)
        exportText.setObjectName('exporttext')

        options = QWidget()
        options.setFixedSize(340, 50)
        layout_options = QHBoxLayout(options)
        format1 = QLabel('token')
        format1.setAlignment(Qt.AlignRight | Qt.AlignVCenter)
        format1.setStyleSheet("color: white; font: 15pt;")
        format2 = QLabel('email:pass:token')
        format2.setAlignment(Qt.AlignLeft | Qt.AlignVCenter)
        format2.setStyleSheet("color: white; font: 15pt;")
        self.switch = AnimatedToggle(checked_color="#3e82e5")
        self.switch.setFixedSize(60, 40)
        layout_options.addWidget(format1)
        layout_options.addWidget(self.switch)
        layout_options.addWidget(format2)
        layout.addWidget(exportText, 1)
        layout.addWidget(options, 3)

        exportButton = QPushButton('Export')
        exportButton.setFixedSize(75, 40)
        exportButton.setObjectName('exportButton')
        exportButton.clicked.connect(self.exportButton_clicked)
        layout.addWidget(exportButton, 0, Qt.AlignCenter)

        parent.installEventFilter(self)
        self.loop = QEventLoop(self)

    def exportButton_clicked(self):
        self.loop.exit(True)

    def reject(self):
        self.loop.exit(False)

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            self.reject()

    def mouseReleaseEvent(self, event):
        if not self.container.underMouse():
            self.reject()

    def close(self):
        self.loop.quit()

    def showEvent(self, event):
        self.setGeometry(self.parent().rect())

    def exec_(self):
        self.show()
        self.raise_()
        res = self.loop.exec_()
        self.hide()
        return res

class editPopup(QWidget):
    def __init__(self, parent):
        super().__init__(parent)
        self.setFocus()
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setAttribute(Qt.WA_StyledBackground)
        self.setAutoFillBackground(True)
        self.setStyleSheet('''
            editPopup {
                background: rgba(0, 0, 0, 0.5);
            }
            QWidget#container {
                border: 0px;
                border-radius: 10px;
                background: rgb(54, 57, 63);
            }
            QWidget#container > QLabel {
                color: white;
                background: 0;
            }
            QLabel#title {
                font: 20pt;
            }
            QPushButton#close {
                color: rgb(124, 125, 128);
                font: 20pt bold;
                background: 0;
                border: 0px;
                outline: 0;
            }
            QPushButton#editButton {
                color: white;
                font: 12pt;
                border: 1px solid white;
                border-radius: 4px;
            }
        ''')

        fullLayout = QVBoxLayout(self)
        self.container = QWidget()
        self.container.setAutoFillBackground(True)
        self.container.setFixedSize(400, 450)
        self.container.setObjectName('container')
        fullLayout.addWidget(self.container, alignment=Qt.AlignCenter)

        self.closeButton = QPushButton('×', self.container)
        self.closeButton.move(370, 10)
        self.closeButton.setObjectName('close')
        self.closeButton.setFixedSize(20, 20)
        self.closeButton.clicked.connect(lambda: self.reject())

        layout = QVBoxLayout(self.container)
        layout.setSpacing(10)
        layout.setContentsMargins(30, 30, 30, 10)

        title = QLabel('Edit Enabled Accounts')
        title.setAlignment(Qt.AlignCenter)
        title.setObjectName('title')
        layout.addWidget(title, 2)

        proxy = QWidget()
        proxy.setFixedHeight(50)
        proxy.layout = QHBoxLayout(proxy)
        proxy_text = QLabel('Proxies')
        proxy_text.setAlignment(Qt.AlignCenter)
        proxy_text.setStyleSheet("color: white; font: 12pt")
        self.proxy_toggle = AnimatedToggle(checked_color="#3e82e5")
        self.proxy_toggle.setFixedSize(70, 50)
        self.proxy_count = QLabel()
        self.proxy_count.setAlignment(Qt.AlignCenter)
        self.proxy_count.setStyleSheet("color:white; font: 12pt")
        self.refresh_proxy_count()
        tokens_raid_style = """
            QPushButton {
                color: white;
                background: rgb(54, 57, 63);
                font: 12pt;
                padding: 5px;
                border-radius: 10px;
                border: 1px solid white;
            }"""
        proxy2 = QWidget()
        proxy2.setFixedHeight(50)
        proxy2.layout = QHBoxLayout(proxy2)
        proxy_select = QPushButton()
        proxy_select.setText("Select Proxies")
        proxy_select.setStyleSheet(tokens_raid_style)
        proxy_select.clicked.connect(lambda: self.select_proxy_clicked())
        proxy_check = QPushButton()
        proxy_check.setText("Check Proxies")
        proxy_check.setStyleSheet(tokens_raid_style)
        proxy_check.clicked.connect(lambda: self.check_proxy_clicked())
        proxy.layout.addWidget(proxy_text)
        proxy.layout.addWidget(self.proxy_toggle)
        proxy.layout.addWidget(self.proxy_count)
        proxy2.layout.addWidget(proxy_select)
        proxy2.layout.addWidget(proxy_check)
        layout.addWidget(proxy)
        layout.addWidget(proxy2)

        usernames = QWidget()
        usernames.setFixedHeight(50)
        usernames.layout = QHBoxLayout(usernames)
        usernames.layout.setAlignment(Qt.AlignLeft)
        usernames.text = QLabel('Username')
        usernames.text.setAlignment(Qt.AlignVCenter)
        usernames.text.setStyleSheet("color: white; font: 12pt;")
        usernames.text.setFixedWidth(120)
        self.usernamesSwitch = AnimatedToggle(checked_color="#3e82e5")
        self.usernamesSwitch.setFixedSize(60, 40)
        usernames.filler = QLabel("")
        usernames.filler.setFixedWidth(10)
        usernames.choice = QPushButton('Choose File')
        usernames.choice.setFixedWidth(100)
        usernames.choice.setStyleSheet("color: white; font: 12pt; border: 1px solid white; border-radius: 4px; padding: 3px;")
        usernames.choice.clicked.connect(lambda: self.username_button_clicked())
        usernames.layout.addWidget(usernames.text)
        usernames.layout.addWidget(self.usernamesSwitch)
        usernames.layout.addWidget(usernames.filler)
        usernames.layout.addWidget(usernames.choice)
        layout.addWidget(usernames)

        self.usernamesStatus = QLabel("0 Usernames     ")
        self.usernamesStatus.setFixedHeight(20)
        self.usernamesStatus.setAlignment(Qt.AlignRight)
        self.usernamesStatus.setStyleSheet("color: white; font: 12pt;")
        layout.addWidget(self.usernamesStatus)

        pfp = QWidget()
        pfp.setFixedHeight(50)
        pfp.layout = QHBoxLayout(pfp)
        pfp.layout.setAlignment(Qt.AlignLeft)
        pfp.text = QLabel('Profile Picture')
        pfp.text.setAlignment(Qt.AlignVCenter)
        pfp.text.setStyleSheet("color: white; font: 12pt;")
        pfp.text.setFixedWidth(120)
        self.pfpSwitch = AnimatedToggle(checked_color="#3e82e5")
        self.pfpSwitch.setFixedSize(60, 40)
        pfp.filler = QLabel("")
        pfp.filler.setFixedWidth(10)
        pfp.choice = QPushButton('Choose File')
        pfp.choice.setFixedWidth(100)
        pfp.choice.setStyleSheet("color: white; font: 12pt; border: 1px solid white; border-radius: 4px; padding: 3px;")
        pfp.choice.clicked.connect(lambda: self.pfp_button_clicked())
        pfp.layout.addWidget(pfp.text)
        pfp.layout.addWidget(self.pfpSwitch)
        pfp.layout.addWidget(pfp.filler)
        pfp.layout.addWidget(pfp.choice)
        layout.addWidget(pfp)

        self.pfpStatus = QLabel("0 Profile Pictures     ")
        self.pfpStatus.setFixedHeight(20)
        self.pfpStatus.setAlignment(Qt.AlignRight)
        self.pfpStatus.setStyleSheet("color: white; font: 12pt;")
        layout.addWidget(self.pfpStatus)

        editButton = QPushButton('Edit')
        editButton.setFixedSize(75, 40)
        editButton.setObjectName('editButton')
        editButton.clicked.connect(self.editButton_clicked)
        layout.addWidget(editButton, 0, Qt.AlignCenter)

        parent.installEventFilter(self)
        self.loop = QEventLoop(self)

    def get_config_file(self):
        with open('data/config.json', 'r') as f:
            config = json.load(f)
        return config

    def get_proxies(self):
        config = self.get_config_file()
        if pathlib.Path(config['proxy_file']).is_file() and config['proxy_file']:
            with open(config['proxy_file'], 'r') as f:
                proxies_raw = [line.rstrip() for line in f]
                proxies = [proxy for proxy in proxies_raw if re.match(r'^(?:(\w+)(?::(\w+))?@)?((?:\d{1,3})(?:\.\d{1,3}){3})(?::(\d{1,5}))?$', proxy)]
            logMessage(0, f'Loaded {len(proxies)} proxies')
            return proxies
        else:
            config['proxy_file'] = ""
            with open('data/config.json', 'w') as f:
                json.dump(config, f, indent=4)
            return []

    def refresh_proxy_count(self):
        self.proxy_count.setText(f"{len(self.get_proxies())} proxies")

    def select_proxy_clicked(self):
        fileName, _ = QFileDialog.getOpenFileName(self, "Select Proxies", "", "Text Files (*.txt)")
        if not fileName:
            return
        config = self.get_config_file()
        config['proxy_file'] = fileName
        with open('data/config.json', 'w') as f:
            json.dump(config, f, indent=4)
        self.refresh_proxy_count()

    def check_proxy_clicked(self):
        pass

    def username_button_clicked(self):
        fileName, _ = QFileDialog.getOpenFileName(self, "Select Usernames", "", "Text Files (*.txt)")
        if not fileName:
            return
        self.usernames_file = fileName
        with open(fileName, 'r') as f:
            usernames = [line.rstrip() for line in f]
        self.usernamesStatus.setText(f"{len(usernames)} Usernames     ")

    def pfp_button_clicked(self):
        fileNames, _ = QFileDialog.getOpenFileNames(self, "Select Profile Pictures", "", "Images (*.jpg;*.jpeg;*.png)")
        if not fileNames:
            return
        self.pfp_files = fileNames
        self.pfpStatus.setText(f"{len(fileNames)} Profile Pictures     ")

    def editButton_clicked(self):
        self.loop.exit(True)

    def reject(self):
        self.loop.exit(False)

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            self.reject()

    def mouseReleaseEvent(self, event):
        if not self.container.underMouse():
            self.reject()

    def close(self):
        self.loop.quit()

    def showEvent(self, event):
        self.setGeometry(self.parent().rect())

    def exec_(self):
        self.show()
        self.raise_()
        res = self.loop.exec_()
        self.hide()
        return res

class editSinglePopup(QWidget):
    def __init__(self, parent):
        super().__init__(parent)
        self.setFocus()
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setAttribute(Qt.WA_StyledBackground)
        self.setAutoFillBackground(True)
        self.setStyleSheet('''
            editSinglePopup {
                background: rgba(0, 0, 0, 0.5);
            }
            QWidget#container {
                border: 0px;
                border-radius: 10px;
                background: rgb(54, 57, 63);
            }
            QWidget#container > QLabel {
                color: white;
                background: 0;
            }
            QLabel#title {
                font: 20pt;
            }
            QPushButton#close {
                color: rgb(124, 125, 128);
                font: 20pt bold;
                background: 0;
                border: 0px;
                outline: 0;
            }
            QPushButton#editButton {
                color: white;
                font: 12pt;
                border: 1px solid white;
                border-radius: 4px;
            }
        ''')

        fullLayout = QVBoxLayout(self)
        self.container = QWidget()
        self.container.setAutoFillBackground(True)
        self.container.setFixedSize(400, 450)
        self.container.setObjectName('container')
        fullLayout.addWidget(self.container, alignment=Qt.AlignCenter)

        self.closeButton = QPushButton('×', self.container)
        self.closeButton.move(370, 10)
        self.closeButton.setObjectName('close')
        self.closeButton.setFixedSize(20, 20)
        self.closeButton.clicked.connect(lambda: self.reject())

        layout = QVBoxLayout(self.container)
        layout.setSpacing(10)
        layout.setContentsMargins(30, 30, 30, 10)

        title = QLabel('Edit Account')
        title.setAlignment(Qt.AlignCenter)
        title.setObjectName('title')
        layout.addWidget(title, 0)

        proxy = QWidget()
        proxy.setFixedHeight(50)
        proxy.layout = QHBoxLayout(proxy)
        proxy_text = QLabel('Proxies')
        proxy_text.setAlignment(Qt.AlignCenter)
        proxy_text.setStyleSheet("color: white; font: 12pt")
        self.proxy_toggle = AnimatedToggle(checked_color="#3e82e5")
        self.proxy_toggle.setFixedSize(70, 50)
        self.proxy_count = QLabel()
        self.proxy_count.setAlignment(Qt.AlignCenter)
        self.proxy_count.setStyleSheet("color:white; font: 12pt")
        self.refresh_proxy_count()
        tokens_raid_style = """
            QPushButton {
                color: white;
                background: rgb(54, 57, 63);
                font: 12pt;
                padding: 5px;
                border-radius: 10px;
                border: 1px solid white;
            }"""
        proxy2 = QWidget()
        proxy2.setFixedHeight(50)
        proxy2.layout = QHBoxLayout(proxy2)
        proxy_select = QPushButton()
        proxy_select.setText("Select Proxies")
        proxy_select.setStyleSheet(tokens_raid_style)
        proxy_select.clicked.connect(lambda: self.select_proxy_clicked())
        proxy_check = QPushButton()
        proxy_check.setText("Check Proxies")
        proxy_check.setStyleSheet(tokens_raid_style)
        proxy_check.clicked.connect(lambda: self.check_proxy_clicked())
        proxy.layout.addWidget(proxy_text)
        proxy.layout.addWidget(self.proxy_toggle)
        proxy.layout.addWidget(self.proxy_count)
        proxy2.layout.addWidget(proxy_select)
        proxy2.layout.addWidget(proxy_check)
        layout.addWidget(proxy, 2)
        layout.addWidget(proxy2, 2)

        usernames = QWidget()
        usernames.setFixedHeight(50)
        usernames.layout = QHBoxLayout(usernames)
        usernames.layout.setAlignment(Qt.AlignLeft)
        usernames.text = QLabel('Username')
        usernames.text.setAlignment(Qt.AlignVCenter)
        usernames.text.setStyleSheet("color: white; font: 12pt;")
        usernames.text.setFixedWidth(120)
        self.usernamesSwitch = AnimatedToggle(checked_color="#3e82e5")
        self.usernamesSwitch.setFixedSize(60, 40)
        usernames.filler = QLabel("")
        usernames.filler.setFixedWidth(10)
        usernames.choice = QLineEdit()
        usernames.choice.setFixedWidth(100)
        usernames.choice.setAlignment(Qt.AlignCenter)
        usernames.choice.setPlaceholderText("Username")
        usernames.choice.setStyleSheet("color: white; border-radius: 5px; border: 1px solid rgb(66, 69, 74); font: 12pt; padding 5px;")
        usernames.layout.addWidget(usernames.text)
        usernames.layout.addWidget(self.usernamesSwitch)
        usernames.layout.addWidget(usernames.filler)
        usernames.layout.addWidget(usernames.choice)
        layout.addWidget(usernames, 2)

        pfp = QWidget()
        pfp.setFixedHeight(50)
        pfp.layout = QHBoxLayout(pfp)
        pfp.layout.setAlignment(Qt.AlignLeft)
        pfp.text = QLabel('Profile Picture')
        pfp.text.setAlignment(Qt.AlignVCenter)
        pfp.text.setStyleSheet("color: white; font: 12pt;")
        pfp.text.setFixedWidth(120)
        self.pfpSwitch = AnimatedToggle(checked_color="#3e82e5")
        self.pfpSwitch.setFixedSize(60, 40)
        pfp.filler = QLabel("")
        pfp.filler.setFixedWidth(10)
        pfp.choice = QPushButton('Choose File')
        pfp.choice.setFixedWidth(100)
        pfp.choice.setStyleSheet("color: white; font: 12pt; border: 1px solid white; border-radius: 4px; padding: 3px;")
        pfp.choice.clicked.connect(lambda: self.pfp_button_clicked())
        pfp.layout.addWidget(pfp.text)
        pfp.layout.addWidget(self.pfpSwitch)
        pfp.layout.addWidget(pfp.filler)
        pfp.layout.addWidget(pfp.choice)
        layout.addWidget(pfp, 2)

        editButton = QPushButton('Edit')
        editButton.setFixedSize(75, 40)
        editButton.setObjectName('editButton')
        editButton.clicked.connect(self.editButton_clicked)
        layout.addWidget(editButton, 0, Qt.AlignCenter)

        parent.installEventFilter(self)
        self.loop = QEventLoop(self)

    def get_config_file(self):
        with open('data/config.json', 'r') as f:
            config = json.load(f)
        return config

    def get_proxies(self):
        config = self.get_config_file()
        if pathlib.Path(config['proxy_file']).is_file() and config['proxy_file']:
            with open(config['proxy_file'], 'r') as f:
                proxies_raw = [line.rstrip() for line in f]
                proxies = [proxy for proxy in proxies_raw if re.match(r'^(?:(\w+)(?::(\w+))?@)?((?:\d{1,3})(?:\.\d{1,3}){3})(?::(\d{1,5}))?$', proxy)]
            logMessage(0, f'Loaded {len(proxies)} proxies')
            return proxies
        else:
            config['proxy_file'] = ""
            with open('data/config.json', 'w') as f:
                json.dump(config, f, indent=4)
            return []

    def refresh_proxy_count(self):
        self.proxy_count.setText(f"{len(self.get_proxies())} proxies")

    def select_proxy_clicked(self):
        fileName, _ = QFileDialog.getOpenFileName(self, "Select Proxies", "", "Text Files (*.txt)")
        if not fileName:
            return
        config = self.get_config_file()
        config['proxy_file'] = fileName
        with open('data/config.json', 'w') as f:
            json.dump(config, f, indent=4)
        self.refresh_proxy_count()

    def check_proxy_clicked(self):
        pass

    def username_button_clicked(self):
        fileName, _ = QFileDialog.getOpenFileName(self, "Select Usernames", "", "Text Files (*.txt)")
        if not fileName:
            return
        with open(fileName, 'r') as f:
            usernames = [line.rstrip() for line in f]
        self.username = random.choice(usernames)

    def pfp_button_clicked(self):
        fileNames, _ = QFileDialog.getOpenFileName(self, "Select Profile Pictures", "", "Images (*.jpg;*.jpeg;*.png)")
        if not fileNames:
            return
        self.pfp_files = fileNames

    def editButton_clicked(self):
        self.loop.exit(True)

    def reject(self):
        self.loop.exit(False)

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            self.reject()

    def mouseReleaseEvent(self, event):
        if not self.container.underMouse():
            self.reject()

    def close(self):
        self.loop.quit()

    def showEvent(self, event):
        self.setGeometry(self.parent().rect())

    def exec_(self):
        self.show()
        self.raise_()
        res = self.loop.exec_()
        self.hide()
        return res

if __name__ == '__main__':
    app = QApplication([])
    Gui = window()
    sys.exit(app.exec_())